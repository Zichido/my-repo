import os
import threading
import asyncio
import nest_asyncio
from http.server import HTTPServer, BaseHTTPRequestHandler
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes

# ----------------------------
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º
# ----------------------------
TOKEN = "8400969993:AAEpt8RHiH3Dct1tx-nFj-3g1AyDQyX-3r8"  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ os.getenv("TOKEN")
if not TOKEN:
    raise SystemExit("‚ùå ERROR: TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")

# ----------------------------
# –ü—Ä–∞–≤–∏–ª–∞ —Ç–æ–ø–∏–∫–æ–≤
# ----------------------------
TOPIC_RULES = {
    7: ["#–ø–∏—Å—å–∫–∏", "#–ø7"],
    50: ["#—Å–∏—Å—å–∫–∏", "#50"],
    60: ["#—á–ª–µ–Ω—ã", "#—á–ª–µ–Ω—ã"]
}

# ----------------------------
# –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞
# ----------------------------
async def enforce_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return

    thread_id = getattr(message, "message_thread_id", None)
    text = (message.text or "").lower()

    if thread_id in TOPIC_RULES:
        allowed_tags = [t.lower() for t in TOPIC_RULES[thread_id]]
        if not any(tag in text for tag in allowed_tags):
            try:
                await message.delete()
                print(f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫–µ {thread_id}: –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞ {allowed_tags}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# ----------------------------
# Fake HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render Free
# ----------------------------
class PingHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is running")

def start_fake_server():
    port = int(os.environ.get("PORT", 10000))  # Render –Ω–∞–∑–Ω–∞—á–∞–µ—Ç PORT –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    httpd = HTTPServer(("0.0.0.0", port), PingHandler)
    print(f"üåê Fake server started on port {port}")
    httpd.serve_forever()

# ----------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞
# ----------------------------
async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, enforce_rules))
    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Ç–æ–ø–∏–∫–∏...")
    await app.run_polling()

# ----------------------------
# –ó–∞–ø—É—Å–∫
# ----------------------------
if __name__ == "__main__":
    # 1. –ó–∞–ø—É—Å–∫–∞–µ–º fake —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=start_fake_server, daemon=True).start()

    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É "loop already running" –≤ VSCode/Windows
    nest_asyncio.apply()
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
